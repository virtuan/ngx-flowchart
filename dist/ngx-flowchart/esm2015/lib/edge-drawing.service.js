import { Injectable } from '@angular/core';
import { FlowchartConstants } from './ngx-flowchart.models';
export class FcEdgeDrawingService {
    constructor() {
    }
    getEdgeDAttribute(pt1, pt2, style, verticaledgeenabled) {
        if (verticaledgeenabled) {
            let dAddribute = `M ${pt1.x - 93}, ${pt1.y + 25} `;
            dAddribute += `L ${pt2.x}, ${pt2.y}`;
            //       if (style === FlowchartConstants.curvedStyle) {
            //         const sourceTangent = this.computeEdgeSourceTangent(pt1, pt2);
            //         const destinationTangent = this.computeEdgeDestinationTangent(pt1, pt2);
            //         dAddribute += `C ${sourceTangent.x - 50}, ${sourceTangent.y} ${(destinationTangent.x + 50)}, ${destinationTangent.y} ${pt2.x + 93}, ${pt2.y -25}`;
            //       } else {
            //         dAddribute += `L ${pt2.x}, ${pt2.y}`;
            //       }
            return dAddribute;
        }
        else {
            let dAddribute = `M ${pt1.x}, ${pt1.y} `;
            if (style === FlowchartConstants.curvedStyle) {
                const sourceTangent = this.computeEdgeSourceTangent(pt1, pt2);
                const destinationTangent = this.computeEdgeDestinationTangent(pt1, pt2);
                dAddribute += `C ${sourceTangent.x}, ${sourceTangent.y} ${(destinationTangent.x - 50)}, ${destinationTangent.y} ${pt2.x}, ${pt2.y}`;
            }
            else {
                dAddribute += `L ${pt2.x}, ${pt2.y}`;
            }
            return dAddribute;
        }
    }
    getEdgeCenter(pt1, pt2) {
        return {
            x: (pt1.x + pt2.x) / 2,
            y: (pt1.y + pt2.y) / 2
        };
    }
    computeEdgeTangentOffset(pt1, pt2) {
        return (pt2.y - pt1.y) / 2;
    }
    computeEdgeSourceTangent(pt1, pt2) {
        return {
            x: pt1.x,
            y: pt1.y + this.computeEdgeTangentOffset(pt1, pt2)
        };
    }
    computeEdgeDestinationTangent(pt1, pt2) {
        return {
            x: pt2.x,
            y: pt2.y - this.computeEdgeTangentOffset(pt1, pt2)
        };
    }
}
FcEdgeDrawingService.decorators = [
    { type: Injectable }
];
FcEdgeDrawingService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRnZS1kcmF3aW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZmxvd2NoYXJ0L3NyYy9saWIvZWRnZS1kcmF3aW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVksa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUd0RSxNQUFNLE9BQU8sb0JBQW9CO0lBRS9CO0lBQ0EsQ0FBQztJQUVNLGlCQUFpQixDQUFDLEdBQWEsRUFBRSxHQUFhLEVBQUUsS0FBYSxFQUFFLG1CQUE0QjtRQUNoRyxJQUFJLG1CQUFtQixFQUFDO1lBQ3RCLElBQUksVUFBVSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRSxFQUFFLEdBQUcsQ0FBQztZQUNsRCxVQUFVLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzQyx3REFBd0Q7WUFDeEQseUVBQXlFO1lBQ3pFLG1GQUFtRjtZQUNuRiw2SkFBNko7WUFDN0osaUJBQWlCO1lBQ2pCLGdEQUFnRDtZQUNoRCxVQUFVO1lBQ0osT0FBTyxVQUFVLENBQUM7U0FDbkI7YUFBTTtZQUNMLElBQUksVUFBVSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDekMsSUFBSSxLQUFLLEtBQUssa0JBQWtCLENBQUMsV0FBVyxFQUFFO2dCQUM1QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM5RCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3hFLFVBQVUsSUFBSSxLQUFLLGFBQWEsQ0FBQyxDQUFDLEtBQUssYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDckk7aUJBQU07Z0JBQ0wsVUFBVSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDdEM7WUFDRCxPQUFPLFVBQVUsQ0FBQztTQUNuQjtJQUVILENBQUM7SUFFTSxhQUFhLENBQUMsR0FBYSxFQUFFLEdBQWE7UUFDL0MsT0FBTztZQUNMLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDdEIsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUN2QixDQUFDO0lBQ0osQ0FBQztJQUVPLHdCQUF3QixDQUFDLEdBQWEsRUFBRSxHQUFhO1FBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVPLHdCQUF3QixDQUFDLEdBQWEsRUFBRSxHQUFhO1FBQzNELE9BQU87WUFDTCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDUixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztTQUNuRCxDQUFDO0lBQ0osQ0FBQztJQUVPLDZCQUE2QixDQUFDLEdBQWEsRUFBRSxHQUFhO1FBQ2hFLE9BQU87WUFDTCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDUixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztTQUNuRCxDQUFDO0lBQ0osQ0FBQzs7O1lBdkRGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGY0Nvb3JkcywgRmxvd2NoYXJ0Q29uc3RhbnRzIH0gZnJvbSAnLi9uZ3gtZmxvd2NoYXJ0Lm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGY0VkZ2VEcmF3aW5nU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBwdWJsaWMgZ2V0RWRnZURBdHRyaWJ1dGUocHQxOiBGY0Nvb3JkcywgcHQyOiBGY0Nvb3Jkcywgc3R5bGU6IHN0cmluZywgdmVydGljYWxlZGdlZW5hYmxlZDogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgaWYgKHZlcnRpY2FsZWRnZWVuYWJsZWQpe1xuICAgICAgbGV0IGRBZGRyaWJ1dGUgPSBgTSAke3B0MS54IC0gOTN9LCAke3B0MS55KyAyNX0gYDtcbiAgICAgIGRBZGRyaWJ1dGUgKz0gYEwgJHtwdDIueH0sICR7cHQyLnl9YDtcbi8vICAgICAgIGlmIChzdHlsZSA9PT0gRmxvd2NoYXJ0Q29uc3RhbnRzLmN1cnZlZFN0eWxlKSB7XG4vLyAgICAgICAgIGNvbnN0IHNvdXJjZVRhbmdlbnQgPSB0aGlzLmNvbXB1dGVFZGdlU291cmNlVGFuZ2VudChwdDEsIHB0Mik7XG4vLyAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uVGFuZ2VudCA9IHRoaXMuY29tcHV0ZUVkZ2VEZXN0aW5hdGlvblRhbmdlbnQocHQxLCBwdDIpO1xuLy8gICAgICAgICBkQWRkcmlidXRlICs9IGBDICR7c291cmNlVGFuZ2VudC54IC0gNTB9LCAke3NvdXJjZVRhbmdlbnQueX0gJHsoZGVzdGluYXRpb25UYW5nZW50LnggKyA1MCl9LCAke2Rlc3RpbmF0aW9uVGFuZ2VudC55fSAke3B0Mi54ICsgOTN9LCAke3B0Mi55IC0yNX1gO1xuLy8gICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgZEFkZHJpYnV0ZSArPSBgTCAke3B0Mi54fSwgJHtwdDIueX1gO1xuLy8gICAgICAgfVxuICAgICAgcmV0dXJuIGRBZGRyaWJ1dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkQWRkcmlidXRlID0gYE0gJHtwdDEueH0sICR7cHQxLnl9IGA7XG4gICAgICBpZiAoc3R5bGUgPT09IEZsb3djaGFydENvbnN0YW50cy5jdXJ2ZWRTdHlsZSkge1xuICAgICAgICBjb25zdCBzb3VyY2VUYW5nZW50ID0gdGhpcy5jb21wdXRlRWRnZVNvdXJjZVRhbmdlbnQocHQxLCBwdDIpO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblRhbmdlbnQgPSB0aGlzLmNvbXB1dGVFZGdlRGVzdGluYXRpb25UYW5nZW50KHB0MSwgcHQyKTtcbiAgICAgICAgZEFkZHJpYnV0ZSArPSBgQyAke3NvdXJjZVRhbmdlbnQueH0sICR7c291cmNlVGFuZ2VudC55fSAkeyhkZXN0aW5hdGlvblRhbmdlbnQueCAtIDUwKX0sICR7ZGVzdGluYXRpb25UYW5nZW50Lnl9ICR7cHQyLnh9LCAke3B0Mi55fWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkQWRkcmlidXRlICs9IGBMICR7cHQyLnh9LCAke3B0Mi55fWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZEFkZHJpYnV0ZTtcbiAgICB9XG5cbiAgfVxuXG4gIHB1YmxpYyBnZXRFZGdlQ2VudGVyKHB0MTogRmNDb29yZHMsIHB0MjogRmNDb29yZHMpOiBGY0Nvb3JkcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IChwdDEueCArIHB0Mi54KSAvIDIsXG4gICAgICB5OiAocHQxLnkgKyBwdDIueSkgLyAyXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgY29tcHV0ZUVkZ2VUYW5nZW50T2Zmc2V0KHB0MTogRmNDb29yZHMsIHB0MjogRmNDb29yZHMpOiBudW1iZXIge1xuICAgIHJldHVybiAocHQyLnkgLSBwdDEueSkgLyAyO1xuICB9XG5cbiAgcHJpdmF0ZSBjb21wdXRlRWRnZVNvdXJjZVRhbmdlbnQocHQxOiBGY0Nvb3JkcywgcHQyOiBGY0Nvb3Jkcyk6IEZjQ29vcmRzIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogcHQxLngsXG4gICAgICB5OiBwdDEueSArIHRoaXMuY29tcHV0ZUVkZ2VUYW5nZW50T2Zmc2V0KHB0MSwgcHQyKVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGNvbXB1dGVFZGdlRGVzdGluYXRpb25UYW5nZW50KHB0MTogRmNDb29yZHMsIHB0MjogRmNDb29yZHMpOiBGY0Nvb3JkcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHB0Mi54LFxuICAgICAgeTogcHQyLnkgLSB0aGlzLmNvbXB1dGVFZGdlVGFuZ2VudE9mZnNldChwdDEsIHB0MilcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==